name: CI/CD for Azure Function with Terraform

on:
  push:
    branches:
      - main

permissions:  
  id-token: write  # Required for OIDC authentication with Azure  
  contents: read   # Default read access to repo contents  

jobs:
  terraform:
    name: Terraform Infrastructure Deployment
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # for TF Authenticating using the Azure CLI is only supported as a User (not a Service Principal).
      # if manualy deploying not TF then this is required!
      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        
      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform
        
      - name: Terraform Apply (Infrastructure Deployment) & Capture Outputs
        run: |
            terraform apply -auto-approve
            echo "FUNC_APP_NAME=$(terraform output -raw function_app_name 2>/dev/null | tr -d '\r')" >> $GITHUB_ENV
        working-directory: terraform

  tests:
    name: Run Unit Tests for Azure Function
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: pip install -r requirements.txt pytest-github-actions-annotate-failures junit2html junitparser

      - name: Run Pytest Unit Tests
        run: PYTHONPATH=. pytest tests/ --junitxml=pytest_report.xml --tb=short

      - name: Convert JUnit XML to Markdown Summary
        run: |
          echo "### üìù Pytest Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          python -c "
          from junitparser import JUnitXml
          xml = JUnitXml.fromfile('pytest_report.xml')
          for suite in xml:
              for case in suite:
                  status = '‚úÖ Pass' if case.result is None else '‚ùå Fail'
                  print(f'| {case.name} | {status} |', file=open('$GITHUB_STEP_SUMMARY', 'a'))
          "
          
      - name: Convert JUnit XML to HTML
        run: junit2html pytest_report.xml pytest_report.html

      - name: Upload HTML Test Report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-report
          path: pytest_report.html


  deploy-function:
    name: Deploy Azure Function
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install Azure Functions Core Tools
        run: npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Deploy Function to Azure
        run: func azure functionapp publish $FUNC_APP_NAME
